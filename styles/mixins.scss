@use "variables.scss"as *;
@use "sass:string";
@use "sass:map";

$item-padding      : $padding-global;
$item-padding-large: $padding-global-large;
$item-padding-small: $padding-global-small;

$item-background-default: $component-background-default;

@mixin color($color) {
    @if $color==light {
        color: $component-color-default;
    }

    @else if $color==dark {
        color: $component-color-default-dark;
    }

    @else {
        color: get-theme-color($color);
    }
}

@mixin background-color($color) {
    @if $color==light {
        background-color: $item-background-default;
    }

    @else if $color==dark {
        background-color: $component-background-default-dark;
    }

    @else if $color==transparent {
        background-color: transparent;
    }
}

@mixin component-header {
    font-size  : $font-large;
    line-height: $font-large;
    font-weight: $text-weight-semi-bold;
    @include text-nowrap;
}

@mixin component-padding($size: normal, $same: false, $wide: false) {
    @if $same==false {
        @if $wide==false {
            @if $size==normal {
                padding: $item-padding-small $item-padding;
            }

            @else if $size==large {
                padding: $item-padding $item-padding-large;
            }

            @else if $size==small {
                padding: 0.3rem $item-padding-small;
            }
        }

        @else {
            @if $size==normal {
                padding: $item-padding-small calc(#{$item-padding}*1.4);
            }

            @else if $size==large {
                padding: $item-padding calc(#{$item-padding-large}*1.4);
            }

            @else if $size==small {
                padding: $padding-global-xsmall $item-padding;
            }
        }

    }

    @else {
        @if $size==normal {
            padding: $item-padding;
        }

        @else if $size==large {
            padding: $item-padding-large;
        }

        @else if $size==small {
            padding: $item-padding-small;
        }
    }
}

@mixin component-padding-complex($part: body, $size: normal) {

    @if $size==normal {
        @if $part==header {
            padding: $padding-global $padding-global $padding-global-small $padding-global;
        }

        @else if $part==body {
            padding: $padding-global-small 0;

            &>* {
                padding: 0px $padding-global;
            }

            &:last-child {
                padding-bottom: $padding-global;
            }

            &:only-child {
                padding-top: $padding-global;
            }
        }

        @else if $part==footer {
            padding: $padding-global-small $padding-global $padding-global $padding-global;
        }
    }

    @else if $size==large {
        @if $part==header {
            padding: $padding-global-large $padding-global-large $padding-global $padding-global-large;
        }

        @else if $part==body {
            // padding: $padding-global $padding-global-large $padding-global $padding-global-large;

            padding: $padding-global 0;

            &>* {
                padding: 0px $padding-global-large;
            }

            &:last-child {
                padding-bottom: $padding-global-large;
            }

            // &:only-child {
            //     padding: $padding-global-large;
            // }
        }

        @else if $part==footer {
            padding: $padding-global $padding-global-large $padding-global-large $padding-global-large;
        }
    }
}

@mixin text-nowrap {
    text-overflow: ellipsis;
    white-space  : nowrap;
    overflow     : hidden;
}

@mixin no-appearance {
    -webkit-appearance: none;
    -moz-appearance   : none;
    appearance        : none;
}

@function get-theme-color($color) {
    @if map-has-key($colors-map, $color) {
        @return map-get($colors-map, $color);
    }

    @error "Color #{$color} does not exist in map";
}

@function option-disabled($map, $option) {
    @if map-has-key($map, $option) {
        @return map.get($map, $option)==false;
    }

    @return false;
}

@function not-option-disabled($map, $option) {
    @return not option-disabled($map, $option);
}

@mixin dark-parent-container {

    .#{$prefix}-inverse,
    .#{$prefix}-accent,
    .#{$prefix}-secondary,
    .#{$prefix}-error,
    .#{$prefix}-warning,
    .#{$prefix}-success {
        @content;
    }
}

@mixin not-colors {
    &:not(.#{$prefix}-success):not(.#{$prefix}-warning):not(.#{$prefix}-error):not(.#{$prefix}-accent):not(.#{$prefix}-secondary) {
        @content;
    }
}

@mixin not-theme {
    &:not(.#{$prefix}-accent):not(.#{$prefix}-secondary) {
        @content;
    }
}

@mixin not-light-component {
    &:not(.#{$prefix}-section):not(.#{$prefix}-hint):not(.#{$prefix}-input-mix):not(.#{$prefix}-info-box):not(.#{$prefix}-list) {
        @content;
    }
}

@mixin mode-dark {
    .#{$prefix}-dark {
        @content;
    }
}

@mixin mode-print {
    .#{$prefix}-print {
        @content;
    }
}

@mixin root {
    :root {
        @content;
    }
}

// @mixin mode-not-no-transitions {
//     body:not(.#{$prefix}-no-transitions) {
//         @content;
//     }
// }

@mixin not-reduced-motion {
    body:not(.#{$prefix}-reduced-motion) {
        @content;
    }
}

@mixin reduced-motion {
    body.#{$prefix}-reduced-motion {
        @content;
    }
}

@mixin mode-not-no-scrollbar-customization {
    body:not(.#{$prefix}-no-scrollbar-customization) {
        @content;
    }
}

@mixin media-screen-max-small {
    @media (max-width: $breakpoint-max-s) {
        @content;
    }
}

@mixin media-screen-max-medium {
    @media (max-width: $breakpoint-max-m) {
        @content;
    }
}

@mixin media-screen-max-large {
    @media (max-width: $breakpoint-max-l) {
        @content;
    }
}

@mixin media-screen-max-xlarge {
    @media (max-width: $breakpoint-max-xl) {
        @content;
    }
}

@mixin media-screen-min-small {
    @media (min-width: $breakpoint-s) {
        @content;
    }
}

@mixin media-screen-min-small-landscape {
    @media (min-width: $breakpoint-s) and (orientation: landscape) {
        @content;
    }
}

@mixin media-screen-min-medium {
    @media (min-width: $breakpoint-m) {
        @content;
    }
}

@mixin media-screen-min-medium-landscape {
    @media (min-width: $breakpoint-m) and (orientation: landscape) {
        @content;
    }
}


@mixin media-screen-min-large {
    @media (min-width: $breakpoint-l) {
        @content;
    }
}

@mixin media-screen-min-large-landscape {
    @media (min-width: $breakpoint-l) and (orientation: landscape) {
        @content;
    }
}

@mixin media-screen-min-xlarge {
    @media (min-width: $breakpoint-xl) {
        @content;
    }
}

@mixin media-screen-min-xlarge-landscape {
    @media (min-width: $breakpoint-xl) and (orientation: landscape) {
        @content;
    }
}

@mixin media-screen-height-max-small {
    @media (max-height: $breakpoint-height-s) {
        @content;
    }
}

@mixin link-decoration($color) {
    color          : $color;
    text-decoration: none;

    &:visited,
    &:focus {
        color: $color;
    }
}

@mixin hidden() {
    position: absolute !important;
    width   : 0 !important;
    height  : 0 !important;
    padding : 0 !important;
    margin  : 0 !important;
    overflow: hidden !important;
}

/**
* Shorthand for animations that already put some defaults 
*/
@mixin animation($name, $duration: $animation-duration-default, $timing: ease-out, $direction: forwards, $delay: 0ms) {
    @if $name {
        animation: $name $duration $timing $delay $direction;
        @content;
    }

    @else {
        @error "Animation name must be provided";
    }
}

/*
* Create highlight on elements
*/
@mixin createHighlight($radius: "", $color: $highlight-color-dark, $noTransition: false) {
    position: relative;

    &:after {
        content         : "";
        position        : absolute;
        width           : 100%;
        height          : 100%;
        overflow        : hidden;
        top             : 0px;
        left            : 0px;
        box-sizing      : border-box;
        transform-origin: center center;
        opacity         : 0;
        transform       : scale(0, 0);

        @if $noTransition==false {
            transition: transform $animation-duration-short ease-out,
                opacity $animation-duration-short ease-out;
        }

        border          : 1px solid transparent;
        background-color: $color;

        @if $radius !="" {
            border-radius: $radius;
        }

        z-index : 0;
    }

    &:hover {
        &:after {
            position        : absolute;
            width           : 100%;
            height          : 100%;
            top             : 0px;
            left            : 0px;
            transform-origin: center;
            opacity         : 1;
            transform       : scale(1, 1);

        }
    }
}

@mixin updateHighlight($radius: "", $color: "") {
    &:after {
        @if $radius !="" {
            border-radius: $radius;
        }

        @if $color !="" {
            background-color: $color;
        }

        @content;
    }
}

@mixin not-animation-or-active {
    &:not(.animation-progress):not(.#{$prefix}-active) {
        @content;
    }
}

@mixin enumerate-base-elements($elements: (), $base) {
    $list: $elements;

    @if(length($list)==0) {
        $list: $base;
    }

    @each $name,
    $options in $list {
        @debug "Compile element: #{$name} with options: ";
        @debug $options;

        $opts: ();

        @if($options !=null) {
            $opts: $options;
        }

        @content
    }
}

@mixin get-icon-color-style($name: "") {
    color: $name;

    svg {
        path {
            stroke: $name;
        }
    }
}

@mixin text-shadow($color) {
    text-shadow: 0px 0px 0.2px $color,
        0px 0px 0.2px $color;
}

@mixin outline-none() {
    outline: none !important;
}

@mixin outline($modifier: null) {
    @if $modifier {
        outline: $modifier;
    }

    @else {
        @include outline-none();
    }
}