@use "variables.scss"as *;
@use "sass:string";
@use "sass:map";

$item-padding      : $padding-global;
$item-padding-large: $padding-global-large;
$item-padding-small: $padding-global-small;

$item-background-default: $component-background-default;

@mixin color($color) {
    @if $color==light {
        color: $component-color-default
    }

    @else if $color==dark {
        color: $component-color-default-dark;
    }

    @else {
        color: get-theme-color($color);
    }
}

@mixin background-color($color) {
    @if $color==light {
        background-color: $item-background-default;
    }

    @else if $color==dark {
        background-color: $component-background-default-dark;
    }

    @else if $color==transparent {
        background-color: transparent;
    }
}

@mixin component-header {
    font-size  : $font-larger;
    font-weight: $text-weight-thin;
}

@mixin component-padding($size: normal, $same: false) {
    @if $same==false {
        @if $size==normal {
            padding: $item-padding-small $item-padding;
        }

        @else if $size==large {
            padding: $item-padding $item-padding-large;
        }

        @else if $size==small {
            padding: 0.3rem $item-padding-small;
        }
    }

    @else {
        @if $size==normal {
            padding: $item-padding;
        }

        @else if $size==large {
            padding: $item-padding-large;
        }

        @else if $size==small {
            padding: $item-padding-small;
        }
    }
}

@mixin component-padding-complex($part: body) {
    @if $part==header {
        padding: $padding-global $padding-global $padding-global-small $padding-global;
    }

    @else if $part==body {
        padding: $padding-global-small $padding-global $padding-global-small $padding-global;
    }

    @else if $part==footer {
        padding: $padding-global-small $padding-global $padding-global $padding-global;
    }

}

@mixin no-appearance {
    -webkit-appearance: none;
    -moz-appearance   : none;
    appearance        : none;
}

@function get-theme-color($color) {
    @if map-has-key($colors-map, $color) {
        @return map-get($colors-map, $color);
    }

    @error "Color #{$color} does not exist in map";
}


@mixin not-colors {
    &:not(.#{$prefix}-success):not(.#{$prefix}-warning):not(.#{$prefix}-error):not(.#{$prefix}-accent):not(.#{$prefix}-secondary) {
        @content;
    }
}

@mixin not-theme {
    &:not(.#{$prefix}-accent):not(.#{$prefix}-secondary) {
        @content;
    }
}

// @mixin size-media() {

//     // View small
//     @media (max-width: $cui-breakpoint-s) {}

//     // View medium
//     @media (max-width: $cui-breakpoint-m) {}


//     // View large
//     @media (max-width: $cui-breakpoint-l) {}
// }